Название проекта: TaskManager
Описание проекта:
TaskManager - это приложение для управления задачами, разработанное с использованием базы данных SQLite для хранения данных и фреймворка Qt для создания графического интерфейса пользователя. Пользователи могут добавлять, просматривать, изменять и удалять задачи, а также отмечать их как выполненные.
Архитектура проекта:
Модель данных:
Task: Класс, представляющий задачу. Содержит поля для заголовка, описания, даты начала, даты окончания и статуса выполнения задачи.
TaskManager: Класс, управляющий операциями добавления, удаления, изменения и просмотра задач. Реализует взаимодействие с базой данных SQLite для сохранения и извлечения задач.
Интерфейс пользователя:
Графический интерфейс Qt: Создает пользовательский интерфейс, который включает в себя окно приложения, кнопки и поля ввода для взаимодействия с пользователем.
Окно приложения: Главное окно, в котором отображаются все элементы пользовательского интерфейса.
Формы и диалоговые окна: Используются для ввода информации о задачах, просмотра списка задач и их деталей, а также для подтверждения действий пользователя (например, удаления задачи).
Элементы управления: Кнопки для выполнения операций (добавления, удаления, изменения, просмотра задач), поля ввода для ввода информации о задачах.
Основной модуль:
main.cpp: Главный модуль приложения. Создает экземпляр класса TaskManager, инициализирует графический интерфейс Qt и запускает цикл обработки событий Qt.
База данных SQLite:
Схема базы данных: Содержит таблицу tasks с полями для заголовка, описания, даты начала, даты окончания и статуса выполнения задач.
Взаимодействие с базой данных: Класс TaskManager использует SQLite API для выполнения SQL-запросов к базе данных, включая запросы на добавление, удаление, изменение и выборку задач.
Логика приложения:
TaskProcessing: Класс, реализующий логику выполнения операций с задачами (добавление, удаление, изменение, выборка).
Формирование и обработка SQL-запросов: TaskProcessing формирует SQL-запросы на основе действий пользователя и вызывает методы TaskManager для их выполнения. Результаты запросов обрабатываются для обновления пользовательского интерфейса.
Техническое задание (ТЗ):

Добавление задач:
Пользователь вводит заголовок, описание, дату начала и дату окончания задачи в соответствующие поля ввода.
После ввода информации о задаче, пользователь нажимает кнопку "Добавить", что приводит к созданию новой записи в базе данных и обновлению списка задач в графическом интерфейсе.
Просмотр списка задач:
При запуске приложения отображается список всех задач из базы данных.
Пользователь может видеть заголовок и статус выполнения каждой задачи в списке.
Просмотр деталей задачи:
При выборе конкретной задачи из списка открывается окно с деталями этой задачи, включая заголовок, описание, дату начала, дату окончания и статус выполнения.
Пользователь может видеть полные детали выбранной задачи.
Редактирование задачи:
Пользователь может изменить заголовок, описание, дату начала и дату окончания задачи.
После внесения изменений пользователь сохраняет их, и данные задачи обновляются в базе данных и на экране.
Удаление задачи:
Пользователь может удалить выбранную задачу.
После подтверждения удаления, запись о задаче удаляется из базы данных и она исчезает из списка задач.
Отметка задачи как выполненной:
Пользователь может отметить задачу как выполненную.
После отметки задача получает статус выполненной и это отображается в списке задач.
Примечания:

Для работы с базой данных SQLite в Qt можно использовать классы QSqlDatabase, QSqlQuery и QSqlTableModel.
Для создания графического интерфейса в Qt используются классы QWidget, QMainWindow, QDialog, QPushButton, QLabel, QLineEdit и другие.
Для управления размещением элементов интерфейса можно использовать классы QVBoxLayout, QHBoxLayout и QGridLayout.
Для обработки событий (нажатие кнопок, изменение полей ввода) используются сигналы и слоты в Qt.
Реализация каждого функционального блока (добавление, просмотр, редактирование, удаление задач) должна быть разделена на отдельные методы или классы для обеспечения чистоты кода и удобства сопровождения.